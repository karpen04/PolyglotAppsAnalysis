{
    "PinpongTest": {
        "arrayToString": [
            "        StringBuilder sb = new StringBuilder(\"[\");",
            "        for (int i = 0; i < array.length; i++) {",
            "            sb.append(array[i]);",
            "            if (i < array.length - 1) {",
            "                sb.append(\", \");",
            "            }",
            "        }",
            "        sb.append(\"]\");",
            "        return sb.toString();",
            "    }"
        ],
        "main": [
            "        try (Engine engine = Engine.create()) {",
            "",
            "            String pyCode = \"import polyglot\\n\" +",
            "                    \"arr = polyglot.import_value('arr') \\n\" +",
            "                    \"mul = lambda x: [i * 2 for i in x]\\n\" +",
            "                    \"mul(arr)\";",
            "",
            "            Context context = Context.newBuilder().engine(engine).allowAllAccess(true).build();",
            "",
            "            int[] data = {1, 2, 3, 4, 5};",
            "            System.out.println(\"Java original data: \" + arrayToString(data));",
            "",
            "            context.getPolyglotBindings().putMember(\"arr\", data);",
            "",
            "            Value pyFunction = context.eval(\"python\", pyCode);",
            "            int[] pyResult = pyFunction.as(int[].class);",
            "",
            "            System.out.println(\"Java data after Python processing: \" + arrayToString(pyResult));",
            "",
            "            for (int i = 0; i < pyResult.length; i++)",
            "                pyResult[i] *= 2;",
            "",
            "            System.out.println(\"Java data modified after came back from Python: \" + arrayToString(pyResult));",
            "",
            "            context.getPolyglotBindings().removeMember(\"arr\");",
            "            context.getPolyglotBindings().putMember(\"arr\", pyResult);",
            "",
            "            pyFunction = context.eval(\"python\", pyCode);",
            "            int[] pyResult2 = pyFunction.as(int[].class);",
            "",
            "            System.out.println(\"Java data after Python processing: \" + arrayToString(pyResult2));",
            "",
            "        }",
            "    }"
        ]
    },
    "SLDebugALot": {
        "test": [
            "",
            "        try (Engine engine = Engine.newBuilder().out(new PrintStream(out)).err(new PrintStream(err)).build()) {",
            "            try (Context context = Context.newBuilder().engine(engine).build()) {",
            "                context.eval(slCode).getMember(\"main\").execute();",
            "",
            "            }",
            "",
            "        } catch (Exception exception) {",
            "            exception.printStackTrace();",
            "        }",
            "",
            "        String log = out.toString();",
            "        String successMessage = \"Executed successfully: \";",
            "        System.out.println(successMessage + log);",
            "    }"
        ],
        "main": [
            "",
            "        SLDebugALot slDebugALot = new SLDebugALot();",
            "",
            "        slDebugALot.test();",
            "",
            "    }"
        ]
    },
    "SLLoggerTest": {
        "testMultipleContextsNestedDifferentLogLevel": [],
        "functionNames": [],
        "testMultipleContextsNestedFineLevel": [],
        "testMultipleContextsExclusiveFineLevel": [],
        "main": [
            "",
            "        SLLoggerTest slLoggerTest = new SLLoggerTest();",
            "",
            "        slLoggerTest.setUp();",
            "        slLoggerTest.testLoggerNoConfig();",
            "",
            "        slLoggerTest.tearDown();",
            "",
            "    }"
        ],
        "createContext": [],
        "tearDown": [],
        "lambda$functionNames$0": [],
        "lambda$functionNames$1": [],
        "testLoggerSlFunctionLevelFine": [],
        "testLoggerSlFunctionSiblingLevelFine": [],
        "createLoggingOptions": [],
        "testLoggerNoConfig": [],
        "setUp": [],
        "testLoggerSlFunctionParentLevelFine": [],
        "executeSlScript": [],
        "testMultipleContextsExclusiveDifferentLogLevel": []
    },
    "SLSharedCodeSeparatedEnvTest": {
        "instrumentsSeeOutputOfBoth": [
            "",
            "        ByteArrayOutputStream combinedOutput = new ByteArrayOutputStream();",
            "",
            "        String sayHello = \"function main() {\\n\" +",
            "                        \"  print(\\\"Ahoj\\\" + Polyglot.import(\\\"extra\\\"));\\n\" +",
            "                        \"}\";",
            "        // @formatter:on",
            "",
            "        e1.eval(Source.newBuilder(\"js\", sayHello, \"Test1\").build());",
            "        e1.getBindings(\"js\").getMember(\"main\").execute();",
            "        combinedOutput.write(os1.toByteArray());",
            "       // assertEquals(\"Ahoj1\\n\", toUnixString(os1));",
            "      //  assertEquals(\"\", toUnixString(os2));",
            "        if(\"Ahoj1\\n\".equals(toUnixString(os1)) && toUnixString(os2).isEmpty()) {",
            "",
            "            System.out.println(true);",
            "",
            "        }",
            "",
            "        e2.eval(Source.newBuilder(\"js\", sayHello, \"Test2\").build());",
            "        e2.getBindings(\"js\").getMember(\"main\").execute();",
            "        combinedOutput.write(os2.toByteArray());",
            "",
            "        if(\"Ahoj1\\n\".equals(toUnixString(os1)) && \"Ahoj2\\n\".equals(toUnixString(os2))) {",
            "",
            "            System.out.println(true);",
            "",
            "        }",
            "       // assertEquals(\"Ahoj1\\n\", toUnixString(os1));",
            "       // assertEquals(\"Ahoj2\\n\", toUnixString(os2));",
            "",
            "        combinedOutput.write(\"endOfOutputCapture\\n\".getBytes(StandardCharsets.UTF_8));",
            "",
            "        System.out.println(toUnixString(combinedOutput));",
            "        System.out.println(toUnixString(osRuntime));",
            "        engine.close();",
            "    }"
        ],
        "initializeEngines": [
            "        osRuntime = new ByteArrayOutputStream();",
            "        engine = Engine.newBuilder().out(osRuntime).err(osRuntime).build();",
            "",
            "        os1 = new ByteArrayOutputStream();",
            "        os2 = new ByteArrayOutputStream();",
            "",
            "        int instances = 2;",
            "        // @formatter:off",
            "        e1 = Context.newBuilder(\"js\").engine(engine).out(os1).allowPolyglotAccess(PolyglotAccess.ALL).build();",
            "        e1.getPolyglotBindings().putMember(\"extra\", 1);",
            "        e2 = Context.newBuilder(\"js\").engine(engine).out(os2).allowPolyglotAccess(PolyglotAccess.ALL).build();",
            "        e2.getPolyglotBindings().putMember(\"extra\", 2);",
            "        e1.initialize(\"js\");",
            "        e2.initialize(\"js\");",
            "        //assertEquals(\"One SLLanguage instance created\", instances + 1, SLLanguage.counter);",
            "",
            "    }"
        ],
        "closeEngines": [
            "        engine.close();",
            "    }"
        ],
        "shareCodeUseDifferentOutputStreams": [
            "",
            "        String sayHello =",
            "            \"function main() {\\n\" +",
            "            \"  print(\\\"Ahoj\\\" + Polyglot.import('extra'));\\n\" +",
            "            \"}\";",
            "        // @formatter:on",
            "",
            "        e1.eval(Source.newBuilder(\"js\", sayHello,\"Test1\").build());",
            "        e1.getBindings(\"js\").getMember(\"main\").execute();",
            "        if(\"Ahoj1\\n\".equals(toUnixString(os1))) {",
            "",
            "            System.out.println(toUnixString(os1));",
            "",
            "        }",
            "        //assertEquals(\"Ahoj1\\n\", toUnixString(os1));",
            "        //assertEquals(\"\", toUnixString(os2));",
            "",
            "        e2.eval(Source.newBuilder(\"js\", sayHello,\"Test2\").build());",
            "        e2.getBindings(\"js\").getMember(\"main\").execute();",
            "        if(\"Ahoj1\\n\".equals(toUnixString(os1)) && \"Ahoj2\\n\".equals(toUnixString(os2))) {",
            "",
            "            System.out.println(toUnixString(os1) + \", \" + toUnixString(os2));",
            "",
            "        }",
            "        //assertEquals(\"Ahoj1\\n\", toUnixString(os1));",
            "       // assertEquals(\"Ahoj2\\n\", toUnixString(os2));",
            "    }"
        ],
        "cleanOutStreams": [
            "",
            "        os1.reset();",
            "        os2.reset();",
            "    }"
        ],
        "main": [
            "",
            "        SLSharedCodeSeparatedEnvTest slSharedCodeSeparatedEnvTest = new SLSharedCodeSeparatedEnvTest();",
            "        try {",
            "            slSharedCodeSeparatedEnvTest.initializeEngines();",
            "            slSharedCodeSeparatedEnvTest.shareCodeUseDifferentOutputStreams();",
            "            slSharedCodeSeparatedEnvTest.cleanOutStreams();",
            "            slSharedCodeSeparatedEnvTest.instrumentsSeeOutputOfBoth();",
            "            slSharedCodeSeparatedEnvTest.closeEngines();",
            "        }catch (Exception exception) {exception.printStackTrace();}",
            "    }"
        ]
    },
    "MulticlassTest": {
        "arrayToString": [
            "        StringBuilder sb = new StringBuilder();",
            "        for (int i : array) {",
            "            sb.append(i).append(\" \");",
            "        }",
            "        return sb.toString().trim();",
            "    }"
        ],
        "main": [
            "        try (Engine engine = Engine.create()) {",
            "            Context context = Context.newBuilder().engine(engine).allowAllAccess(true).build();",
            "",
            "",
            "            int[] javaData = {1, 2, 3, 4, 5};",
            "            System.out.println(\"Java original data: \" + arrayToString(javaData));",
            "            context.getPolyglotBindings().putMember(\"arr\", javaData);",
            "",
            "            context.eval(\"python\", \"import polyglot\\n\" +",
            "                    \"class PythonClass1:\\n\" +",
            "                    \"    def process_data(self):\\n\" +",
            "                    \"       arr = polyglot.import_value('arr')\\n\" +",
            "                    \"       return [i * 2 for i in arr]\\n\" +",
            "                    \"instance1 = PythonClass1()\");",
            "",
            "",
            "            Value pythonInstance1 = context.getBindings(\"python\").getMember(\"instance1\");",
            "            Value processDataMethod1 = pythonInstance1.getMember(\"process_data\");",
            "",
            "",
            "",
            "            Value pythonResult1 = processDataMethod1.execute();",
            "            int[] pythonData = new int[(int) pythonResult1.getArraySize()];",
            "            for (int i = 0; i < pythonResult1.getArraySize(); i++) {",
            "                pythonData[i] = pythonResult1.getArrayElement(i).asInt();",
            "            }",
            "            System.out.println(\"Java data after PythonClass1 processing: \" + arrayToString(pythonData));",
            "",
            "",
            "            context.eval(\"python\", \"class PythonClass2:\\n\" +",
            "                    \"    def process_data(self, data):\\n\" +",
            "                    \"        return [i + 1 for i in data]\\n\" +",
            "                    \"instance2 = PythonClass2()\");",
            "",
            "",
            "            Value pythonInstance2 = context.getBindings(\"python\").getMember(\"instance2\");",
            "            Value processDataMethod2 = pythonInstance2.getMember(\"process_data\");",
            "",
            "",
            "            Value pythonList2 = context.eval(\"python\",",
            "                    \"def to_list(java_data):\\n\" +",
            "                            \"    return [i for i in java_data]\\n\" +",
            "                            \"to_list\").execute((Object) pythonData);",
            "",
            "",
            "            Value pythonResult2 = processDataMethod2.execute(pythonList2);",
            "            int[] finalResult = new int[(int) pythonResult2.getArraySize()];",
            "            for (int i = 0; i < pythonResult2.getArraySize(); i++) {",
            "                finalResult[i] = pythonResult2.getArrayElement(i).asInt();",
            "            }",
            "            System.out.println(\"Java data after PythonClass2 processing: \" + arrayToString(finalResult));",
            "        } catch (Exception ex) {",
            "            ex.printStackTrace();",
            "        }",
            "    }"
        ]
    },
    "ToStringOfEvalTest": {
        "checkToStringOnAFunction": [
            "        context.eval(\"js\", \"function checkName() {}\");",
            "        Value value1 = context.getBindings(\"js\").getMember(\"checkName\");",
            "        Value value2 = context.getBindings(\"js\").getMember(\"checkName\");",
            "",
            "        if(value1 != null && value2 != null && value2.toString().contains(\"checkName\")) {",
            "",
            "            System.out.println(value2);",
            "            System.out.println(\"checkToStringOnAFunction: \" + true);",
            "",
            "        }",
            "",
            "        //assertNotNull(\"Symbol is not null\", value1);",
            "       // assertNotNull(\"Symbol is not null either\", value2);",
            "",
            "        //assertFalse(\"Symbol is not null\", value1.isNull());",
            "        //assertFalse(\"Symbol is not null either\", value2.isNull());",
            "",
            "       // assertTrue(\"Contans checkName text: \" + value2, value2.toString().contains(\"checkName\"));",
            "    }"
        ],
        "main": [
            "",
            "        ToStringOfEvalTest toStringOfEvalTest = new ToStringOfEvalTest();",
            "",
            "        toStringOfEvalTest.initialize();",
            "        toStringOfEvalTest.checkToStringOnAFunction();",
            "        toStringOfEvalTest.dispose();",
            "",
            "    }"
        ],
        "dispose": [
            "        context.close();",
            "    }"
        ],
        "initialize": [
            "        context = Context.create();",
            "    }"
        ]
    },
    "MultilangTest": {"main": [
        "        try (Context context = Context.create()) {",
        "",
        "            Value jsFunction = context.eval(\"js\", \"(x, y) => x + y\");",
        "            int jsResult = jsFunction.execute(2, 3).asInt();",
        "            System.out.println(\"JavaScript result: \" + jsResult);",
        "",
        "",
        "            Value pyFunction = context.eval(\"python\", \"lambda x, y: x * y\");",
        "            int pyResult = pyFunction.execute(4, 5).asInt();",
        "            System.out.println(\"Python result: \" + pyResult);",
        "",
        "",
        "            context.getBindings(\"js\").putMember(\"javaVar\", 10);",
        "            Value jsCode = context.eval(\"js\", \"javaVar * 2\");",
        "            int javaResultFromJS = jsCode.asInt();",
        "            System.out.println(\"Java result from JavaScript: \" + javaResultFromJS);",
        "",
        "",
        "            context.getBindings(\"python\").putMember(\"pythonVar\", 7);",
        "            Value pyCode = context.eval(\"python\", \"pythonVar + 3\");",
        "            int javaResultFromPython = pyCode.asInt();",
        "            System.out.println(\"Java result from Python: \" + javaResultFromPython);",
        "        }",
        "    }"
    ]},
    "SLParseErrorTest": {
        "testParseError": [
            "        try {",
            "            final Source src = Source.newBuilder(\"js\", \"function testSyntaxError(a) {break;} function main() {return testSyntaxError;}\", \"testSyntaxError.js\").buildLiteral();",
            "            context.eval(src);",
            "            System.out.println(\"Should not reach here.\");",
            "           // Assert.assertTrue(\"Should not reach here.\", false);",
            "        } catch (PolyglotException e) {",
            "            System.out.println(\"testParseError\");",
            "            System.out.println(\"Should be a syntax error: \" + e.isSyntaxError());",
            "            System.out.println(\"Should have source section: \" + e.getSourceLocation());",
            "          //  Assert.assertTrue(\"Should be a syntax error.\", e.isSyntaxError());",
            "          //  Assert.assertNotNull(\"Should have source section.\", e.getSourceLocation());",
            "        }"
        ],
        "setUp": [
            "        context = Context.create(\"js\");",
            "    }"
        ],
        "testParseErrorEOF2": [],
        "main": [
            "",
            "        SLParseErrorTest slParseErrorTest = new SLParseErrorTest();",
            "        slParseErrorTest.setUp();",
            "        slParseErrorTest.testParseError();",
            "        slParseErrorTest.testParseErrorEOF1();",
            "        slParseErrorTest.testParseErrorEOF2();",
            "        slParseErrorTest.tearDown();",
            "",
            "    }"
        ],
        "testParseErrorEOF1": [],
        "tearDown": [
            "        context = null;",
            "    }"
        ]
    },
    "SLExecutionListenerTest": {
        "enterRoot": [
            "        ExecutionEvent event = assertEvent(characters, null);",
            "        System.out.println(\"False: \" + event.isExpression() +\"\\nFalse: \" + event.isStatement() + \"\\nTrue: \" + event.isRoot());",
            "",
            "    }"
        ],
        "add": [
            "        events.add(e);",
            "    }"
        ],
        "assertEvent": [
            "        ExecutionEvent event = events.pop();",
            "        /** none of cases goes through this if **/",
            "        try{",
            "            //assertEquals(expectedRootName, event.getRootName());",
            "            // assertEquals(characters, event.getLocation().getCharacters());",
            "            // assertEquals(inputs.length, event.getInputValues().size());",
            "            if(inputs.length == event.getInputValues().size() &&",
            "                expectedRootName.equals(event.getRootName())) {",
            "",
            "                for (int i = 0; i < inputs.length; i++) {",
            "                        assertValue(inputs[i], event.getInputValues().get(i));",
            "",
            "                }",
            "",
            "                if (returnValue == null) {",
            "                    //    assertNull(event.getReturnValue());",
            "                    System.out.println(\"event.getReturnValue() (should be null): \" + event.getReturnValue());",
            "                } else {",
            "                     assertValue(returnValue, event.getReturnValue());",
            "",
            "                }",
            "            }",
            "        }catch (AssertionError exception) { exception.printStackTrace();}",
            "       // assertNotNull(event.toString());",
            "        return event;",
            "    }"
        ],
        "enterExpression": [
            "        ExecutionEvent event = assertEvent(characters, null);",
            "        System.out.println(\"True: \" + event.isExpression() +\"\\nFalse: \" + event.isStatement() + \"\\nFalse: \" + event.isRoot());",
            "       // assertTrue(event.isExpression());",
            "       // assertFalse(event.isStatement());",
            "        //assertFalse(event.isRoot());",
            "    }"
        ],
        "leaveStatement": [
            "        ExecutionEvent event = assertEvent(characters, returnValue, inputs);",
            "        System.out.println(\"\\nTrue: \" + event.isStatement() + \"\\nFalse: \" + event.isRoot());",
            "",
            "    }"
        ],
        "testStatements": [
            "        ExecutionListener.newBuilder().onEnter(this::add).onReturn(this::add).//",
            "                        statements(true).//",
            "                        collectExceptions(true).collectInputValues(true).collectReturnValue(true).//",
            "                        attach(context.getEngine());",
            "",
            "        eval(\"2 + 3;\");",
            "        enterStatement(\"2 + 3\");",
            "        leaveStatement(\"2 + 3\", 5);",
            "",
            "        eval(\"2 + 3; 3 + 6;\");",
            "        enterStatement(\"2 + 3\");",
            "        leaveStatement(\"2 + 3\", 5);",
            "        enterStatement(\"3 + 6\");",
            "        leaveStatement(\"3 + 6\", 9);",
            "    }"
        ],
        "main": [
            "",
            "        SLExecutionListenerTest slExecutionListenerTest = new SLExecutionListenerTest();",
            "",
            "        slExecutionListenerTest.setUp();",
            "        slExecutionListenerTest.testRootsAndStatements();",
            "        slExecutionListenerTest.testStatements();",
            "        slExecutionListenerTest.testExpressions();",
            "        slExecutionListenerTest.testRoots();",
            "        slExecutionListenerTest.testExpressionsStatementsAndRoots();",
            "        slExecutionListenerTest.testFactorial();",
            "        slExecutionListenerTest.tearDown();",
            "",
            "    }"
        ],
        "testRootsAndStatements": [
            "        ExecutionListener.newBuilder().onEnter(this::add).onReturn(this::add).//",
            "                        roots(true).statements(true).//",
            "                        collectExceptions(true).collectInputValues(true).collectReturnValue(true).//",
            "                        attach(context.getEngine());",
            "",
            "        eval(\"return 2;\");",
            "",
            "        enterRoot(rootSourceSection(\"return 2;\"));",
            "        enterStatement(\"return 2\");",
            "        leaveStatement(\"return 2\", null);",
            "        leaveRoot(rootSourceSection(\"return 2;\"), 2);",
            "    }"
        ],
        "tearDown": [
            "        //assertTrue(events.isEmpty());",
            "        if(events.isEmpty()) {",
            "            context.close();",
            "            context = null;",
            "        }",
            "    }"
        ],
        "testExpressions": [
            "        ExecutionListener.newBuilder().onEnter(this::add).onReturn(this::add).//",
            "                        expressions(true).//",
            "                        collectExceptions(true).collectInputValues(true).collectReturnValue(true).//",
            "                        attach(context.getEngine());",
            "        eval(\"2 + 3;\");",
            "",
            "        enterStatement(\"2 + 3\");",
            "        enterExpression(\"2\");",
            "        leaveExpression(\"2\", 2);",
            "        enterExpression(\"3\");",
            "        leaveExpression(\"3\", 3);",
            "        leaveStatement(\"2 + 3\", 5, 2, 3);",
            "    }"
        ],
        "leaveExpression": [
            "        ExecutionEvent event = assertEvent(characters, returnValue, inputs);",
            "        System.out.println(\"True: \" + event.isExpression() +\"\\nFalse: \" + event.isStatement() + \"\\nFalse: \" + event.isRoot());",
            "",
            "    }"
        ],
        "testRoots": [
            "        ExecutionListener.newBuilder().onEnter(this::add).onReturn(this::add).//",
            "                        roots(true).//",
            "                        collectExceptions(true).collectInputValues(true).collectReturnValue(true).//",
            "                        attach(context.getEngine());",
            "",
            "        eval(\"return 2;\");",
            "",
            "        enterRoot(rootSourceSection(\"return 2;\"));",
            "        leaveRoot(rootSourceSection(\"return 2;\"), 2);",
            "    }"
        ],
        "rootSourceSection": [
            "        return \"wrapper(){\\n\" + s + \"\\n}\";",
            "    }"
        ],
        "eval": [
            "        expectedRootName = \"wrapper\";",
            "        context.eval(\"js\", wrapInFunction(s));",
            "",
            "       return context.getBindings(\"js\").getMember(\"wrapper\").execute();",
            "    }"
        ],
        "enterStatement": [
            "        ExecutionEvent event = assertEvent(characters, null);",
            "        System.out.println(\"\\nTrue: \" + event.isStatement() + \"\\nFalse: \" + event.isRoot());",
            "        //assertTrue(event.isStatement());",
            "        // statements are sometimes expressions",
            "        //assertFalse(event.isRoot());",
            "    }"
        ],
        "wrapInFunction": [
            "",
            "        return \"function \" + rootSourceSection(s);",
            "    }"
        ],
        "assertValue": [
            "        if(actual != null) {",
            "            if (actual.isNumber()) {",
            "                System.out.println(\"Expected: \" + expected + \", Actual: \" + actual.asInt());",
            "                //  assertEquals(expected, actual.asInt());",
            "            } else if (actual.isBoolean()) {",
            "                System.out.println(\"Expected: \" + expected + \", Actual: \" + actual.asBoolean());",
            "                //  assertEquals(expected, actual.asBoolean());",
            "            } else if (actual.canExecute()) {",
            "                System.out.println(\"Expected: \" + ((Value) expected).getSourceLocation() + \", Actual: \"",
            "                        + actual.getSourceLocation());",
            "                // assertEquals(((Value) expected).getSourceLocation(), actual.getSourceLocation());",
            "            } else {",
            "                //This should be executed",
            "                throw new AssertionError(expected.toString());",
            "            }",
            "        }",
            "    }"
        ],
        "setUp": [
            "        context = Context.create(\"js\");",
            "        ",
            "",
            "    }"
        ],
        "testExpressionsStatementsAndRoots": [
            "        ExecutionListener.newBuilder().onEnter(this::add).onReturn(this::add).//",
            "                        expressions(true).statements(true).//",
            "                        collectExceptions(true).collectInputValues(true).collectReturnValue(true).//",
            "                        attach(context.getEngine());",
            "",
            "        eval(\"2 + 3;\");",
            "",
            "        enterStatement(\"2 + 3\");",
            "        enterExpression(\"2\");",
            "        leaveExpression(\"2\", 2);",
            "        enterExpression(\"3\");",
            "        leaveExpression(\"3\", 3);",
            "        leaveStatement(\"2 + 3\", 5, 2, 3);",
            "    }"
        ],
        "leaveRoot": [
            "        ExecutionEvent event = assertEvent(characters, returnValue, inputs);",
            "        System.out.println(\"False: \" + event.isExpression() +\"\\nFalse: \" + event.isStatement() + \"\\nTrue: \" + event.isRoot());",
            "",
            "    }"
        ],
        "testFactorial": [
            "        // @formatter:off",
            "        String characters =",
            "                \"fac(n) {\\n\" +",
            "                        \"    if (n <= 1) {\\n\" +",
            "                        \"        return 1;\\n\" +",
            "                        \"    }\\n\" +",
            "                        \"    return fac(n - 1) * n;\\n\" +",
            "                        \"}\";",
            "        // @formatter:on",
            "        context.eval(\"js\", \"function \" + characters);",
            "        Value factorial = context.getBindings(\"js\").getMember(\"fac\");",
            "        ExecutionListener.newBuilder().onReturn(this::add).onEnter(this::add).//",
            "                        expressions(true).statements(true).roots(true).//",
            "                        collectExceptions(true).collectInputValues(true).collectReturnValue(true).//",
            "                        attach(context.getEngine());",
            "        expectedRootName = \"fac\";",
            "        //assertEquals(0, events.size());",
            "        if(events.isEmpty()) {",
            "            for (int i = 0; i < 10; i++) {",
            "                testFactorial(characters, factorial);",
            "            }",
            "        }",
            "    }"
        ]
    },
    "SLInteropControlFlowTest": {
        "testIf": [
            "        final Source src = Source.newBuilder(\"python\",  \"def test_if(a):\\n\" +",
            "                \"    if a:\\n\" +",
            "                \"        return 1\\n\" +",
            "                \"    else:\\n\" +",
            "                \"        return 0\\n\" +",
            "                \"\\n\" +",
            "                \"def main(a):\\n\" +",
            "                \"    return test_if(a)\\n\", \"testIf.py\").buildLiteral();",
            "        final Value fnc = context.eval(src).getMember(\"main\");",
            "        if(fnc.canExecute())",
            "            fnc.execute(false);",
            "    }"
        ],
        "setUp": [
            "        context = Context.create(\"python\");",
            "    }"
        ],
        "main": [
            "",
            "            SLInteropControlFlowTest slInteropControlFlowTest = new SLInteropControlFlowTest();",
            "",
            "            slInteropControlFlowTest.setUp();",
            "            slInteropControlFlowTest.testWhile();",
            "            slInteropControlFlowTest.testIf();",
            "            slInteropControlFlowTest.tearDown();",
            "",
            "    }"
        ],
        "testWhile": [
            "        final Source src = Source.newBuilder(\"python\",  \"def test_while(a):\\n\" +",
            "                \"    while a:\\n\" +",
            "                \"        break\\n\" +",
            "                \"    return\\n\" +",
            "                \"\\n\" +",
            "                \"def main(a):\\n\" +",
            "                \"    return test_while(a)\\n\", \"testWhile.py\").buildLiteral();",
            "        final Value fnc = context.eval(src).getMember(\"main\");",
            "        //Assert.assertTrue(fnc.canExecute());",
            "        if(fnc.canExecute())",
            "            fnc.execute(false);",
            "",
            "    }"
        ],
        "tearDown": [
            "        context = null;",
            "    }"
        ]
    },
    "SLInteropPrimitiveTest": {
        "testBoolean": [
            "        final Source src = Source.newBuilder(\"python\", \"def testBoolean(a, b):\\n   return a == b\\ndef main(a, b):\\n   return testBoolean(a, b)\", \"testBoolean.py\").buildLiteral();",
            "        final Value fnc = context.eval(src);",
            "        //Assert.assertTrue(fnc.canExecute());",
            "        final Value res = fnc.getMember(\"main\").execute(true, false);",
            "        System.out.println(\"False: \" + res.asBoolean());",
            "",
            "    }"
        ],
        "testNumbers": [
            "        context = Context.create(\"js\");",
            "        context = Context.newBuilder(\"js\").build();",
            "        final Source src = Source.newBuilder(\"js\", \"function addNum(a,b) {return a + b;} function main(a, b) {return addNum(a, b);}\", \"addNum.js\").buildLiteral();"
        ],
        "testChar": [
            "        final Source src = Source.newBuilder(\"python\", \"def testChar(a, b):\\n    return a == b\\ndef main(a, b):\\n    return testChar(a, b)\", \"testChar.py\").buildLiteral();",
            "        final Value fnc = context.eval(src);",
            "        //Assert.assertTrue(fnc.canExecute());",
            "        final Value res = fnc.getMember(\"main\").execute('a', 'b');",
            "        System.out.println(\"False: \" + res.asBoolean());",
            "    }"
        ],
        "setUp": [
            "        context = Context.create(\"python\");",
            "    }"
        ],
        "main": [
            "",
            "        SLInteropPrimitiveTest slInteropPrimitiveTest = new SLInteropPrimitiveTest();",
            "",
            "        slInteropPrimitiveTest.setUp();",
            "        slInteropPrimitiveTest.testBoolean();",
            "        slInteropPrimitiveTest.testChar();",
            "        slInteropPrimitiveTest.testNumbers();",
            "        slInteropPrimitiveTest.tearDown();",
            "",
            "    }"
        ],
        "tearDown": [
            "        context = null;",
            "    }"
        ]
    },
    "SLInteropObjectTest": {
        "testObject": [
            "        final Source src = Source.newBuilder(\"python\",  \"def main():\\n\" +",
            "                \"    o = type('', (), {})()\\n\" +  // Creating an empty object",
            "                \"    o.a = 10\\n\" +",
            "                \"    o.b = \\\"B\\\"\\n\" +",
            "                \"    return o\\n\", \"testObject.py\").buildLiteral();",
            "        final Value obj = context.eval(src).getMember(\"main\").execute();",
            "       // Assert.assertTrue(obj.hasMembers());",
            "        if(obj.hasMembers()) {",
            "            Value a = obj.getMember(\"a\");",
            "            System.out.println(\"a (should be 10): \" + a.asInt());",
            "            // Assert.assertNotNull(a);",
            "            // Assert.assertTrue(a.isNumber());",
            "            //  Assert.assertEquals(10, a.asInt());",
            "",
            "            Value b = obj.getMember(\"b\");",
            "            System.out.println(\"b (shoud be B): \" + b.asString());",
            "            //  Assert.assertNotNull(b);",
            "            // Assert.assertTrue(b.isString());",
            "            //  Assert.assertEquals(\"B\", b.asString());",
            "",
            "            obj.putMember(\"a\", b);",
            "            a = obj.getMember(\"a\");",
            "            System.out.println(\"a (should be B): \" + a.asString());",
            "            //  Assert.assertTrue(a.isString());",
            "            //  Assert.assertEquals(\"B\", a.asString());",
            "",
            "            obj.removeMember(\"a\");",
            "            System.out.println(\"should be false: \" + obj.hasMember(\"a\"));",
            "            // Assert.assertFalse(obj.hasMember(\"a\"));",
            "",
            "            System.out.println(\"[b]: \" + obj.getMemberKeys().toString());",
            "            //  Assert.assertEquals(\"[b]\", obj.getMemberKeys().toString());",
            "        }",
            "    }"
        ],
        "setUp": [
            "        context = Context.create(\"python\");",
            "    }"
        ],
        "testNewForeign": [
            "        final Source src = Source.newBuilder(\"python\", \"def get_value(type):\\n\" +",
            "                \"    o = type()\\n\" +",
            "                \"    o.a = 10\\n\" +",
            "                \"    return o.value\\n\", \"testObject.py\").buildLiteral();",
            "        context.eval(src);",
            "        Value getValue = context.getBindings(\"python\").getMember(\"get_value\");",
            "        Value ret = getValue.execute(new TestType());",
            "        System.out.println(\"20: \" + ret.asLong());",
            "       // Assert.assertEquals(20, ret.asLong());",
            "    }"
        ],
        "main": [
            "",
            "        SLInteropObjectTest slInteropObjectTest = new SLInteropObjectTest();",
            "",
            "        slInteropObjectTest.setUp();",
            "        slInteropObjectTest.testObject();",
            "        slInteropObjectTest.testNewForeign();",
            "",
            "    }"
        ],
        "tearDown": [
            "        context.close();",
            "        context = null;",
            "    }"
        ]
    },
    "SLDebugDirectTest": {
        "getOut": [],
        "createInteropComputation": [
            "        return Source.newBuilder(\"python\",  \"def test():\\n\" +",
            "                \"    pass\\n\\n\" +",
            "                \"def interop_function(notify_handler):\\n\" +",
            "                \"    executing = True\\n\" +",
            "                \"    while executing == True or executing:\\n\" +",
            "                \"        executing = notify_handler.is_executing\\n\" +",
            "                \"    return executing\\n\", \"interopComputation.py\").buildLiteral();",
            "    }"
        ],
        "createFactorialWithDebugger": [
            "        return Source.newBuilder(\"python\", \"def test():\\n\" +",
            "                \"    res = fac(2)\\n\" +",
            "                \"    print(res)\\n\" +",
            "                \"    return res\\n\\n\" +",
            "                \"def fac(n):\\n\" +",
            "                \"    if n <= 1:\\n\" +",
            "                \"        return 1\\n\" +",
            "                \"    n_minus_one = n - 1\\n\" +",
            "                \"    n_mo_fact = fac(n_minus_one)\\n\" +",
            "                \"    # debugger placeholder\\n\" +",
            "                \"    res = n * n_mo_fact\\n\" +",
            "                \"    return res\\n\", \"factorial.py\").buildLiteral();",
            "    }"
        ],
        "getErr": [],
        "createFactorial": [
            "        return Source.newBuilder(\"python\",  \"def test():\\n\" +",
            "                \"    res = fac(2)\\n\" +",
            "                \"    print(res)\\n\" +",
            "                \"    return res\\n\\n\" +",
            "                \"def fac(n):\\n\" +",
            "                \"    if n <= 1:\\n\" +",
            "                \"        return 1\\n\" +",
            "                \"    n_minus_one = n - 1\\n\" +",
            "                \"    n_mo_fact = fac(n_minus_one)\\n\" +",
            "                \"    res = n * n_mo_fact\\n\" +",
            "                \"    return res\\n\", \"factorial.py\").buildLiteral();",
            "    }"
        ],
        "testPause": [
            "        final Source interopComp = createInteropComputation();",
            "",
            "        context.eval(interopComp);",
            "        assertExecutedOK();",
            "",
            "        final ExecNotifyHandler nh = new ExecNotifyHandler();",
            "",
            "        // Do pause after execution has really started",
            "",
            "        Value value = context.getBindings(\"python\").getMember(\"interopFunction\").execute(nh);",
            "",
            "        assertExecutedOK();",
            "        System.out.println(value);",
            "        boolean n = value.asBoolean();",
            "        System.out.println(\"Interop computation OK: \" + !n);",
            "",
            "    }"
        ],
        "stepInStepOver": [
            "        final Source factorial = createFactorial();",
            "        context.eval(factorial);",
            "",
            "        Value value = context.getBindings(\"python\").getMember(\"test\");",
            "        Value resultValue = value.execute();",
            "        String resultStr = resultValue.toString();",
            "        Number result = resultValue.asInt();",
            "        assertExecutedOK();",
            "",
            "        System.out.println(\"result: \" + result);",
            "        System.out.println(\"Factorial computed OK (should be 2): \" + result.intValue());",
            "        System.out.println(\"Factorial computed OK (should be 2): \" + resultStr);",
            "    }"
        ],
        "createNull": [
            "        return Source.newBuilder(\"python\", \"def null_test():\\n\" +",
            "                \"    res = do_null()\\n\" +",
            "                \"    return res\\n\\n\" +",
            "                \"def do_null():\\n\" +",
            "                \"    pass\\n\", \"nullTest.py\").buildLiteral();",
            "    }"
        ],
        "main": [
            "",
            "        SLDebugDirectTest slDebugDirectTest = new SLDebugDirectTest();",
            "",
            "        slDebugDirectTest.context = Context.create(\"python\");",
            "",
            "        try {",
            "            slDebugDirectTest.testBreakpoint();",
            "            slDebugDirectTest.stepInStepOver();",
            "            slDebugDirectTest.testNull();",
            "",
            "        }catch (Throwable exception){ exception.printStackTrace(); }",
            "    }"
        ],
        "testNull": [
            "        final Source nullTest = createNull();",
            "        context.eval(nullTest);",
            "",
            "        Value value = context.getBindings(\"python\").getMember(\"null_test\").execute();",
            "        assertExecutedOK();",
            "",
            "        String val = value.toString();",
            "        System.out.println(\"Should be null: \" + val);",
            "",
            "    }"
        ],
        "testBreakpoint": [
            "        final Source factorial = createFactorial();",
            "",
            "",
            "        context.eval(factorial);",
            "        assertExecutedOK();",
            "",
            "        Value value = context.getBindings(\"python\").getMember(\"test\").execute();",
            "        assertExecutedOK();",
            "        int n = value.asInt();",
            "        System.out.println(n);",
            "",
            "    }"
        ],
        "assertExecutedOK": [
            "",
            "        if (ex != null) {",
            "            if (ex instanceof AssertionError) {",
            "                throw ex;",
            "            } else {",
            "                throw new AssertionError(\"Error during execution\", ex);",
            "            }",
            "        }",
            "        System.out.println(\"Assuming all requests processed: \" +run + \", \" + run.isEmpty());",
            "    }"
        ]
    },
    "SLValueSharingTest": {
        "testImplicitValueSharing": [
            "        JavaObject obj = new JavaObject();",
            "        Context.Builder b = Context.newBuilder().allowAllAccess(true);",
            "        try (Context c0 = b.build();",
            "                        Context c1 = b.build()) {",
            "",
            "            c0.eval(\"js\", \"function test(obj) { obj.sharedField = new Object(); }\");",
            "            c1.eval(\"js\", \"function test(obj) { return obj.sharedField; }\");",
            "",
            "            c0.getBindings(\"js\").getMember(\"test\").execute(obj);",
            "            Value test1 = c1.getBindings(\"js\").getMember(\"test\");",
            "",
            "            Value v = test1.execute(obj);",
            "",
            "            if(v.hasMembers() && v.equals(c1.asValue(obj.sharedField))) {",
            "",
            "                System.out.println(\"testImplicitValueSharing: \" + true);",
            "",
            "            }",
            "",
            "           // assertTrue(v.hasMembers());",
            "           // assertEquals(v, c1.asValue(obj.sharedField));",
            "        }",
            "",
            "    }"
        ],
        "main": [
            "",
            "        SLValueSharingTest slValueSharingTest = new SLValueSharingTest();",
            "        slValueSharingTest.testImplicitValueSharing();",
            "",
            "    }"
        ]
    },
    "PassItselfBackViaContextTest": {
        "callbackWithParamTen": [
            "        myObjWrapped.execute(10);",
            "",
            "    }"
        ],
        "prepareSystem": [
            "        myObj = new MyObj();",
            "        context = Context.newBuilder().allowAllAccess(true).build();",
            "        context.getPolyglotBindings().putMember(\"myObj\", myObj);",
            "        context.eval(\"python\", \"import polyglot \\n\" +",
            "                                                \"myObj = polyglot.import_value('myObj') \\n\" +",
            "                                                \"def main(arg): \\n\" +",
            "                                                \"   myObj.setValue(arg)\\n\" +",
            "                                                \"   return myObj\");",
            "        myObjWrapped = Value.asValue(context.getBindings(\"python\").getMember(\"main\"));",
            "",
            "        myObjCall = myObjWrapped.as(CallWithValue.class);",
            "    }"
        ],
        "callbackWithParamTruffleObject": [
            "        myObjWrapped.execute(myObjWrapped.execute(myObj));",
            "",
            "    }"
        ],
        "callbackWithValueTruffleObject": [
            "        myObjCall.call(myObjWrapped.execute(myObj));",
            "",
            "    }"
        ],
        "main": [
            "",
            "        PassItselfBackViaContextTest passItselfBackViaContextTest = new PassItselfBackViaContextTest();",
            "",
            "        passItselfBackViaContextTest.prepareSystem();",
            "        passItselfBackViaContextTest.callbackWithParamTen();",
            "        passItselfBackViaContextTest.callbackWithParamTruffleObject();",
            "        passItselfBackViaContextTest.callbackWithValueTen();",
            "        passItselfBackViaContextTest.callbackWithValueTruffleObject();",
            "        passItselfBackViaContextTest.disposeSystem();",
            "",
            "",
            "    }"
        ],
        "disposeSystem": [
            "        context.close();",
            "    }"
        ],
        "callbackWithValueTen": [
            "        myObjCall.call(10);",
            "",
            "    }"
        ]
    },
    "SLFactorialTest": {
        "initEngine": [
            "        context = Context.create();",
            "        // @formatter:off",
            "        context.eval(\"python\", \"def fac(n):\\n\" +",
            "                \"   if n <= 1:\\n\" +",
            "                \"       return 1\\n\" +",
            "                \"   prev = fac(n - 1)\\n\" +",
            "                \"   return prev * n\\n\"",
            "        );",
            "        // @formatter:on",
            "        factorial = context.getBindings(\"python\").getMember(\"fac\");",
            "    }"
        ],
        "factorialOf3": [
            "        Number ret = factorial.execute(3).as(Number.class);",
            "        //assertEquals(6, ret.intValue());",
            "        System.out.println(\"6: \" + ret.intValue());",
            "    }"
        ],
        "factorialOf1": [
            "        Number ret = factorial.execute(1).as(Number.class);",
            "        //assertEquals(1, ret.intValue());",
            "        System.out.println(\"1: \" + ret.intValue());",
            "    }"
        ],
        "main": [
            "",
            "        SLFactorialTest slFactorialTest = new SLFactorialTest();",
            "",
            "        try {",
            "",
            "            slFactorialTest.initEngine();",
            "            slFactorialTest.factorialOf5();",
            "            slFactorialTest.factorialOf3();",
            "            slFactorialTest.factorialOf1();",
            "",
            "        }catch (Exception exception){ exception.printStackTrace();}",
            "",
            "    }"
        ],
        "dispose": [
            "        context.close();",
            "    }"
        ],
        "factorialOf5": [
            "        Number ret = factorial.execute(5).as(Number.class);",
            "        //assertEquals(120, ret.intValue());",
            "        System.out.println(\"120: \" + ret.intValue());",
            "    }"
        ]
    },
    "SLInteropOperatorTest": {
        "testSub": [
            "        final Source src = Source.newBuilder(\"python\", \"def test_sub(a, b):\\n\" +",
            "                \"    return a - b\\n\\n\" +",
            "                \"def main(a, b):\\n\" +",
            "                \"    return test_sub(a, b)\\n\", \"testSub.py\").buildLiteral();",
            "        final Value fnc = context.eval(src);",
            "        final Value res = fnc.getMember(\"main\").execute(1, 2);",
            "        System.out.println(\"True: \" + res.isNumber());",
            "        System.out.println(\"-1: \" + res.asInt());",
            "       // Assert.assertTrue(res.isNumber());",
            "       // Assert.assertEquals(-1, res.asInt());",
            "    }"
        ],
        "setUp": [
            "        context = Context.create(\"python\");",
            "    }"
        ],
        "testAdd": [
            "        final Source src = Source.newBuilder(\"python\", \"def test_add(a, b):\\n\" +",
            "                \"    return a + b\\n\\n\" +",
            "                \"def main(a, b):\\n\" +",
            "                \"    return test_add(a, b)\\n\", \"testAdd.py\").buildLiteral();",
            "        final Value fnc = context.eval(src);",
            "",
            "       // Assert.assertTrue(fnc.canExecute());",
            "        final Value res = fnc.getMember(\"main\").execute(1, 2);",
            "        System.out.println(\"True: \" + res.isNumber());",
            "        System.out.println(\"3: \" + res.asInt());",
            "       // Assert.assertTrue(res.isNumber());",
            "       // Assert.assertEquals(3, res.asInt());",
            "    }"
        ],
        "main": [
            "",
            "        SLInteropOperatorTest slInteropOperatorTest = new SLInteropOperatorTest();",
            "",
            "        slInteropOperatorTest.setUp();",
            "        slInteropOperatorTest.testAdd();",
            "        slInteropOperatorTest.testSub();",
            "        slInteropOperatorTest.tearDown();",
            "",
            "    }"
        ],
        "tearDown": [
            "        context = null;",
            "    }"
        ]
    },
    "SLCodeSharingTest": {
        "createFib": [
            "        return Source.newBuilder(\"python\",\"def fib(n):\\n\" +",
            "                        \"    if n == 1 or n == 2:\\n\" +",
            "                        \"        return 1\\n\" +",
            "                        \"    return fib(n - 1) + fib(n - 2)\\n\",",
            "                        \"fib.py\").buildLiteral();",
            "    }"
        ],
        "main": [
            "",
            "        SLCodeSharingTest slCodeSharingTest = new SLCodeSharingTest();",
            "        try {",
            "",
            "            slCodeSharingTest.testFibSharing();",
            "",
            "        } catch (Exception exception) {",
            "",
            "            exception.printStackTrace();",
            "            exception.fillInStackTrace();",
            "        }",
            "",
            "",
            "    }"
        ],
        "testFibSharing": [
            "        Source fib = createFib();",
            "        try (Engine engine = Engine.create()) {",
            "            try (Context context = Context.newBuilder().engine(engine).build()) {",
            "",
            "                context.eval(fib);",
            "",
            "            }",
            "            try (Context context = Context.newBuilder().engine(engine).build()) {",
            "",
            "                context.eval(fib);",
            "",
            "            }",
            "        }",
            "    }"
        ]
    },
    "SLExceptionTest": {
        "testGuestLanguageError": [
            "        try {",
            "            String source = \"def bar():\\n\" +",
            "                    \"    x = 1 / \\\"asdf\\\"\\n\\n\" +",
            "                    \"def foo():\\n\" +",
            "                    \"    return bar()\\n\\n\" +",
            "                    \"def main():\\n\" +",
            "                    \"    foo()\\n\";",
            "            ctx.eval(Source.newBuilder(\"python\", source, \"script.py\").buildLiteral());",
            "           // fail();",
            "        } catch (PolyglotException e) {",
            "           // assertTrue(e.isGuestException());",
            "",
            "            Iterator<StackFrame> frames = e.getPolyglotStackTrace().iterator();",
            "            assertGuestFrame(frames, \"python\", \"bar\", \"script.sl\", 21, 31);",
            "            assertGuestFrame(frames, \"python\", \"foo\", \"script.sl\", 59, 64);",
            "            assertGuestFrame(frames, \"python\", \"main\", \"script.sl\", 86, 91);",
            "            assertHostFrame(frames, Context.class.getName(), \"eval\");",
            "            assertHostFrame(frames, SLExceptionTest.class.getName(), \"testGuestLanguageError\");",
            "",
            "            // only host frames trailing",
            "            while (frames.hasNext()) {",
            "              //  assertTrue(frames.next().isHostFrame());",
            "            }",
            "        }",
            "    }"
        ],
        "assertProxyException": [
            "       // assertTrue(e.isHostException());",
            "            if(e.isHostException()) {",
            "                if (e.asHostException() instanceof AssertionError) {",
            "                    throw (AssertionError) e.asHostException();",
            "                }",
            "            }",
            "       // assertSame(proxy.thrownException, e.asHostException());",
            "",
            "        Iterator<StackFrame> frames = e.getPolyglotStackTrace().iterator();",
            "        assertHostFrame(frames, TestProxy.class.getName(), \"execute\");",
            "        for (int i = 0; i < 2; i++) {",
            "            assertGuestFrame(frames, \"python\", \"foo\", \"Unnamed\", 18, 21);",
            "            assertGuestFrame(frames, \"python\", \"bar\", \"Unnamed\", 50, 56);",
            "",
            "            assertHostFrame(frames, Value.class.getName(), \"execute\");",
            "            assertHostFrame(frames, TestProxy.class.getName(), \"execute\");",
            "        }",
            "",
            "        assertGuestFrame(frames, \"python\", \"foo\", \"Unnamed\", 18, 21);",
            "        assertGuestFrame(frames, \"python\", \"bar\", \"Unnamed\", 50, 56);",
            "",
            "        assertHostFrame(frames, Value.class.getName(), \"execute\");",
            "        assertHostFrame(frames, SLExceptionTest.class.getName(), \"testProxyGuestLanguageStack\");",
            "",
            "        while (frames.hasNext()) {",
            "            // skip unit test frames.",
            "           // assertTrue(frames.next().isHostFrame());",
            "        }",
            "    }"
        ],
        "testThroughProxy": [
            "        assertException(false, \"def bar():\\n\" +",
            "                \"    x = 1 / (1 == 1)\\n\\n\" +",
            "                \"def foo(z):\\n\" +",
            "                \"    z(bar)\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    return foo\\n\");",
            "    }"
        ],
        "access$000": [],
        "testGuestOverHostPropagation": [
            "        Context context = Context.newBuilder(\"python\").allowAllAccess(true).build();",
            "        String code =  \"def other(x):\\n\" +",
            "                \"    return invalid_function()\\n\\n\" +",
            "                \"def f(test):\\n\" +",
            "                \"    test.method_that_takes_function(other)\\n\";",
            "",
            "        context.eval(\"python\", code);",
            "        try {",
            "            context.getBindings(\"python\").getMember(\"f\").execute(this);",
            "           // fail();",
            "        } catch (PolyglotException e) {",
            "           // assertFalse(e.isHostException());",
            "           // assertTrue(e.isGuestException());",
            "            Iterator<StackFrame> frames = e.getPolyglotStackTrace().iterator();",
            "           // assertTrue(frames.next().isGuestFrame());",
            "            assertGuestFrame(frames, \"python\", \"other\", \"Unnamed\", 29, 46);",
            "           //assertHostFrame(frames, \"com.oracle.truffle.polyglot.PolyglotFunction\", \"apply\");",
            "            assertHostFrame(frames, \"testSourceCode.SLExceptionTest\", \"methodThatTakesFunction\");",
            "            assertGuestFrame(frames, \"python\", \"f\", \"Unnamed\", 66, 101);",
            "",
            "            // rest is just unit test host frames",
            "            while (frames.hasNext()) {",
            "             //  assertTrue(frames.next().isHostFrame());",
            "            }",
            "        }",
            "    }"
        ],
        "testProxyGuestLanguageStack": [
            "        Value bar = ctx.eval(\"python\", \"def foo(f):\\n\" +",
            "                \"    f()\\n\\n\" +",
            "                \"def bar(f):\\n\" +",
            "                \"    return foo(f)\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    return bar\\n\");",
            "",
            "        TestProxy proxy = new TestProxy(3, bar);",
            "        try {",
            "            bar.getMember(\"main\").execute(proxy);",
            "           // fail();",
            "        } catch (PolyglotException e) {",
            "            assertProxyException(proxy, e);",
            "",
            "            for (PolyglotException seenException : proxy.seenExceptions) {",
            "                // exceptions are unwrapped and wrapped again",
            "               // assertNotSame(e, seenException);",
            "              // assertSame(e.asHostException(), seenException.asHostException());",
            "            }",
            "        }",
            "    }"
        ],
        "main": [
            "",
            "        SLExceptionTest slExceptionTest = new SLExceptionTest();",
            "",
            "        slExceptionTest.setUp();",
            "        slExceptionTest.testExceptions();",
            "        slExceptionTest.testNonMain();",
            "        slExceptionTest.testThroughProxy();",
            "        slExceptionTest.testHostException();",
            "        slExceptionTest.testGuestLanguageError();",
            "        slExceptionTest.testProxyGuestLanguageStack();",
            "",
            "    }"
        ],
        "assertHostException": [
            "        boolean initialExecute = true;",
            "        RuntimeException[] exception = new RuntimeException[1];",
            "        try {",
            "            Value value = ctx.eval(\"python\", source);",
            "            initialExecute = false;",
            "            ProxyExecutable proxy = (args) -> {",
            "                throw exception[0] = new RuntimeException();",
            "            };",
            "            value.getMember(\"main\").execute(proxy);",
            "            //Assert.fail(\"Should not reach here.\");",
            "        } catch (PolyglotException e) {",
            "           // Assert.assertFalse(initialExecute);",
            "           // Assert.assertTrue(e.asHostException() == exception[0]);",
            "            //assertFrames(false, e, expectedFrames);",
            "        }",
            "    }"
        ],
        "testExceptions": [
            "        assertException(true,  \"def main():\\n\" +",
            "                \"    x = 1 / (1 == 1)\\n\\n\" +",
            "                \"if __name__ == '__main__':\\n\" +",
            "                \"    main()\\n\");",
            "        assertException(true, \"def foo():\\n\" +",
            "                \"    return 1 / \\\"foo\\\"\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    foo()\\n\" +",
            "                \"if __name__ == '__main__':\\n\" +",
            "                \"    main()\\n\");",
            "        assertException(true, \"def foo():\\n\" +",
            "                \"    bar()\\n\\n\" +",
            "                \"def bar():\\n\" +",
            "                \"    return 1 / \\\"foo\\\"\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    foo()\\n\" +",
            "                \"if __name__ == '__main__':\\n\" +",
            "                \"    main()\\n\");",
            "        assertException(true, \"def foo():\\n\" +",
            "                \"    bar1()\\n\" +",
            "                \"    bar2()\\n\\n\" +",
            "                \"def bar1():\\n\" +",
            "                \"    return 1\\n\\n\" +",
            "                \"def bar2():\\n\" +",
            "                \"    return \\\"foo\\\" / 1\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    foo()\\n\" +",
            "                \"if __name__ == '__main__':\\n\" +",
            "                \"    main()\\n\");",
            "    }"
        ],
        "tearDown": [
            "        this.ctx.close();",
            "    }"
        ],
        "testHostException": [
            "        assertHostException(\"def foo(z):\\n\" +",
            "                \"    z(1)\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    return foo\\n\");",
            "    }"
        ],
        "methodThatTakesFunction": [
            "        return s.apply(\"t\");",
            "    }"
        ],
        "lambda$assertHostException$1": [],
        "assertGuestFrame": [],
        "lambda$assertException$0": [],
        "testNonMain": [
            "        assertException(false,  \"def foo(z):\\n\" +",
            "                \"    x = 1 / (1 == 1)\\n\\n\" +",
            "                \"def main():\\n\" +",
            "                \"    return foo\\n\");",
            "    }"
        ],
        "setUp": [
            "        this.ctx = Context.create(\"python\");",
            "    }"
        ],
        "assertHostFrame": [],
        "assertException": [
            "        boolean initialExecute = true;",
            "        try {",
            "            Value value = ctx.eval(\"python\", source);",
            "            initialExecute = false;",
            "            if (failImmediately) {",
            "               // Assert.fail(\"Should not reach here.\");",
            "            }",
            "            ProxyExecutable proxy = (args) -> args[0].execute();",
            "            value.getMember(\"main\").execute(proxy);",
            "           // Assert.fail(\"Should not reach here.\");",
            "        } catch (PolyglotException e) {",
            "           // Assert.assertEquals(failImmediately, initialExecute);",
            "           // assertFrames(failImmediately, e, expectedFrames);",
            "        }",
            "    }"
        ]
    },
    "SLReadPropertyTest": {
        "setUp": [
            "        this.ctx = Context.create(\"js\");",
            "        ctx.eval(Source.newBuilder(\"js\", \"function createObject() {\\n\" +",
            "                        \"obj1 = new Object();\\n\" +",
            "                        \"obj1.number = 42;\\n\" +",
            "                        \"return obj1;\\n\" +",
            "                        \"}\\n\" +",
            "                        \"function main() {\\n\" +",
            "                        \"return createObject;\\n\" +",
            "                        \"}\", \"Test\").build());",
            "",
            "        //second execute executes \"createObject\" in JS",
            "        this.slObject = ctx.getBindings(\"js\").getMember(\"main\").execute().execute();",
            "    }"
        ],
        "main": [
            "",
            "",
            "        SLReadPropertyTest slReadPropertyTest = new SLReadPropertyTest();",
            "        try {",
            "            slReadPropertyTest.setUp();",
            "            slReadPropertyTest.testRead();",
            "            slReadPropertyTest.tearDown();",
            "        }catch (Exception ex) {ex.printStackTrace();}",
            "    }"
        ],
        "testRead": [
            "        if(slObject.getMember(\"number\").asInt() == 42 && slObject.getMember(\"nonexistent\") == null) {",
            "",
            "            System.out.println(\"testRead: \" + true);",
            "        }",
            "       // Assert.assertEquals(42, slObject.getMember(\"number\").asInt());",
            "       // assertNull(slObject.getMember(\"nonexistent\"));",
            "    }"
        ],
        "tearDown": [
            "        this.ctx.close();",
            "    }"
        ]
    },
    "SLJavaInteropExceptionTest": {
        "testGR7284": [
            "        String sourceText = \"function test(validator) {\\n\" +",
            "                        \"  return validator.validateException();\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "           try {",
            "                test.execute(new Validator());",
            "              //  fail(\"expected a PolyglotException but did not throw\");",
            "            } catch (PolyglotException ex) {",
            "               System.out.println(\"expected HostException: \" + ex.isHostException());",
            "               System.out.println(ex.asHostException().toString() + \": \" + NoSuchElementException.class);",
            "",
            "            }",
            "        }",
            "    }"
        ],
        "testGuestHostCallbackHostError": [
            "        String sourceText = \"function doMultiCallback(validator, n) {\\n\" +",
            "                        \"    map = new Object();\\n\" +",
            "                        \"    if (n <= 0) {\\n\" +",
            "                        \"        return validator.validateCallback(n, map); // will throw error\\n\" +",
            "                        \"    }\\n\" +",
            "                        \"    map[n] = doCall;\\n\" +",
            "                        \"    validator.validateCallback(n, map);\\n\" +",
            "                        \"}\\n\" +",
            "                        \"function doCall(validator, x) {\\n\" +",
            "                        \"    doMultiCallback(validator, x - 1);\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value doMultiCallback = context.getBindings(\"js\").getMember(\"doMultiCallback\");",
            "            int numCalbacks = 3;",
            "            try {",
            "                doMultiCallback.execute(new Validator(), numCalbacks);",
            "               // fail(\"expected a PolyglotException but did not throw\");",
            "            } catch (PolyglotException ex) {",
            "               //Assert.assertEquals(\"Nothing to call\", ex.getMessage());",
            "                Iterator<StackFrame> frames = ex.getPolyglotStackTrace().iterator();",
            "                assertHostFrame(frames, Validator.class.getName(), \"validateCallback\");",
            "                assertGuestFrame(frames, \"js\", \"doMultiCallback\", \"Test\", 91, 125);",
            "                for (int i = 0; i < numCalbacks; i++) {",
            "                    assertGuestFrame(frames, \"js\", \"doCall\", \"Test\", 252, 285);",
            "                    assertHostFrame(frames, \"com.oracle.truffle.polyglot.PolyglotFunction\", \"apply\");",
            "                    assertHostFrame(frames, Validator.class.getName(), \"validateCallback\");",
            "                    assertGuestFrame(frames, \"js\", \"doMultiCallback\", \"Test\", 178, 212);",
            "                }",
            "                assertHostFrame(frames, Value.class.getName(), \"execute\");",
            "",
            "            }",
            "        }",
            "    }"
        ],
        "testTruffleMap": [
            "        boolean res = false;",
            "        String javaMethod = \"validateMap\";",
            "        String sourceText = \"\" +",
            "                        \"function test(validator) {\\n\" +",
            "                        \"  return validator.\" + javaMethod + \"(new Object());\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "            test.execute(new Validator());",
            "            res = true;",
            "            System.out.println(res);",
            "        } catch (Exception exception) {",
            "",
            "            exception.printStackTrace();",
            "            res = false;",
            "            System.out.println(res);",
            "        }",
            "",
            "    }"
        ],
        "main": [
            "",
            "        SLJavaInteropExceptionTest slJavaInteropExceptionTest = new SLJavaInteropExceptionTest();",
            "        try {",
            "",
            "            System.out.println(\"testGR7284\\n\");",
            "            slJavaInteropExceptionTest.testGR7284();",
            "            System.out.println(\"\\ntestGR7284GuestHostGuestHost\\n\");",
            "            slJavaInteropExceptionTest.testGR7284GuestHostGuestHost();",
            "            System.out.println(\"\\ntestGuestHostCallbackGuestError\\n\");",
            "            slJavaInteropExceptionTest.testGuestHostCallbackGuestError();",
            "            System.out.println(\"\\ntestGuestHostCallbackHostError\\n\");",
            "            slJavaInteropExceptionTest.testGuestHostCallbackHostError();",
            "            System.out.println(\"\\ntestFunctionProxy\\n\");",
            "            slJavaInteropExceptionTest.testFunctionProxy();",
            "            System.out.println(\"\\ntestTruffleMap\\n\");",
            "            slJavaInteropExceptionTest.testTruffleMap();",
            "",
            "        }catch (Exception exception) {exception.printStackTrace();}",
            "",
            "    }"
        ],
        "testFunctionProxy": [
            "        String javaMethod = \"validateFunction\";",
            "        String sourceText = \"\" +",
            "                        \"function supplier() {\\n\" +",
            "                        \"  return error();\\n\" +",
            "                        \"}\\n\" +",
            "                        \"function test(validator) {\\n\" +",
            "                        \"  return validator.\" + javaMethod + \"(supplier);\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "            try {",
            "                test.execute(new Validator());",
            "                //fail(\"expected a PolyglotException but did not throw\");",
            "            } catch (PolyglotException ex) {",
            "                StackTraceElement last = null;",
            "                boolean found = false;",
            "                for (StackTraceElement curr : ex.getStackTrace()) {",
            "                    if (curr.getMethodName().contains(javaMethod)) {",
            "                        if(last != null) {",
            "                            System.out.println(\"expected Proxy stack frame: \" + last.getClassName().contains(\"Proxy\"));",
            "                        }",
            "                       // assertNotNull(last);",
            "                       // assertThat(\"expected Proxy stack frame\", last.getClassName(), containsString(\"Proxy\"));",
            "                        found = true;",
            "                        break;",
            "                    }",
            "                    last = curr;",
            "                }",
            "                System.out.println(javaMethod + \" not found in stack trace: \" + found);",
            "              //  assertTrue(javaMethod + \" not found in stack trace\", found);",
            "            }",
            "        }",
            "    }"
        ],
        "testGuestHostCallbackGuestError": [
            "        String sourceText = \"function doMultiCallback(validator, n) {\\n\" +",
            "                        \"    map = new Object();\\n\" +",
            "                        \"    if (n <= 0) {\\n\" +",
            "                        \"        return error();\\n\" +",
            "                        \"    }\\n\" +",
            "                        \"    map[n] = doCall;\\n\" +",
            "                        \"    validator.validateCallback(n, map);\\n\" +",
            "                        \"}\\n\" +",
            "                        \"function doCall(validator, x) {\\n\" +",
            "                        \"    doMultiCallback(validator, x - 1);\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value doMultiCallback = context.getBindings(\"js\").getMember(\"doMultiCallback\");",
            "            int numCalbacks = 3;",
            "            try {",
            "                doMultiCallback.execute(new Validator(), numCalbacks);",
            "              // fail(\"expected a PolyglotException but did not throw\");",
            "            } catch (PolyglotException ex) {",
            "                Iterator<StackFrame> frames = ex.getPolyglotStackTrace().iterator();",
            "                assertGuestFrame(frames, \"js\", \"error\");",
            "                assertGuestFrame(frames, \"js\", \"doMultiCallback\", \"Test\", 91, 98);",
            "                for (int i = 0; i < numCalbacks; i++) {",
            "                    assertGuestFrame(frames, \"js\", \"doCall\", \"Test\", 205, 238);",
            "                    assertHostFrame(frames, \"com.oracle.truffle.polyglot.PolyglotFunction\", \"apply\");",
            "                    assertHostFrame(frames, Validator.class.getName(), \"validateCallback\");",
            "                    assertGuestFrame(frames, \"js\", \"doMultiCallback\", \"Test\", 131, 165);",
            "                }",
            "                assertHostFrame(frames, Value.class.getName(), \"execute\");",
            "",
            "            }",
            "        }",
            "    }"
        ],
        "testGR7284GuestHostGuestHost": [
            "        String sourceText = \"function test(validator) {\\n\" +",
            "                        \"  return validator.validateNested();\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "            try {",
            "                test.execute(new Validator());",
            "                //fail(\"expected a PolyglotException but did not throw\");",
            "            } catch (PolyglotException ex) {",
            "                System.out.println(\"expected HostException: \" + ex.isHostException());",
            "                System.out.println(ex.asHostException().toString() + \": \" + NoSuchElementException.class);",
            "               // assertTrue(\"expected HostException\", ex.isHostException());",
            "              //  assertThat(ex.asHostException(), instanceOf(NoSuchElementException.class));",
            "            }",
            "        }",
            "    }"
        ]
    },
    "SLJavaInteropTest": {
        "asFunctionWithVarArgs": [
            "        boolean res = false;",
            "        String scriptText = \"function values(a, b) {\\n\" + //",
            "                        \"  print(\\\"Called with \\\" + a + \\\" and \\\" + b);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "        PassInVarArg valuesIn = fn.as(PassInVarArg.class);",
            "",
            "        valuesIn.call(\"OK\", \"Fine\");",
            "       // assertEquals(\"Called with OK and Fine\\n\", toUnixString(os));",
            "        if(\"Called with OK and Fine\\n\".equals(toUnixString(os))) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"asFunctionWithVarArgs: \" + res);",
            "    }"
        ],
        "asFunctionWithArgVarArgs": [
            "        boolean res = false;",
            "        String scriptText = \"function values(a, b, c) {\\n\" + //",
            "                        \"  print(\\\"Called with \\\" + a + \\\" and \\\" + b + c);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "        PassInArgAndVarArg valuesIn = fn.as(PassInArgAndVarArg.class);",
            "",
            "        valuesIn.call(\"OK\", \"Fine\", \"Well\");",
            "       // assertEquals(\"Called with OK and FineWell\\n\", toUnixString(os));",
            "",
            "        if(\"Called with OK and FineWell\\n\".equals(toUnixString(os))) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "            System.out.println(\"asFunctionWithArgVarArgs: \" + res);",
            "    }"
        ],
        "main": [
            "",
            "        SLJavaInteropTest slJavaInteropTest = new SLJavaInteropTest();",
            "",
            "        slJavaInteropTest.create();",
            "        try {",
            "            slJavaInteropTest.testHostFunctionDisplayName();",
            "            slJavaInteropTest.asFunction();",
            "            slJavaInteropTest.clearArray();",
            "            slJavaInteropTest.asFunctionWithArg();",
            "            slJavaInteropTest.clearArray();",
            "            slJavaInteropTest.asFunctionWithArr();",
            "            slJavaInteropTest.clearArray();",
            "            slJavaInteropTest.asFunctionWithVarArgs();",
            "            slJavaInteropTest.clearArray();",
            "            slJavaInteropTest.asFunctionWithArgVarArgs();",
            "            slJavaInteropTest.sumPairs();",
            "            slJavaInteropTest.sumPairsFunctionalInterface();",
            "            slJavaInteropTest.sumPairsFunctionalRawInterface();",
            "            slJavaInteropTest.sumPairsIndirect();",
            "            slJavaInteropTest.sumPairsInArray();",
            "            slJavaInteropTest.sumPairsInArrayOfArray();",
            "            slJavaInteropTest.sumMapInArrayOfArray();",
            "            slJavaInteropTest.sumPairInMapOfArray();",
            "            slJavaInteropTest.accessJavaMap();",
            "            slJavaInteropTest.testMemberAssignment();",
            "",
            "            slJavaInteropTest.dispose();",
            "        }catch (Exception exception){exception.printStackTrace();}",
            "    }"
        ],
        "asFunctionWithArg": [
            "        boolean res = false;",
            "        String scriptText = \"function values(a, b) {\\n\" + //",
            "                        \"  print(\\\"Called with \\\" + a + \\\" and \\\" + b);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "        PassInValues valuesIn = fn.as(PassInValues.class);",
            "        valuesIn.call(\"OK\", \"Fine\");",
            "",
            "",
            "        if(\"Called with OK and Fine\\n\".equals(toUnixString(os))) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"asFunctionWithArg: \" + res);",
            "",
            "       // assertEquals(\"Called with OK and Fine\\n\", toUnixString(os));",
            "    }"
        ],
        "sumPairsInArray": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, arr) {\\n\" + //",
            "                        \"  sum.sumArray(arr);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "",
            "        Sum javaSum = new Sum();",
            "",
            "        PairImpl[] arr = {",
            "                        new PairImpl(\"one\", 1),",
            "                        new PairImpl(\"two\", 2),",
            "                        new PairImpl(\"three\", 3),",
            "        };",
            "        fn.execute(javaSum, arr);",
            "",
            "        if(javaSum.sum == 6) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumPairsInArray: \" + res);",
            "       // assertEquals(6, javaSum.sum);",
            "    }"
        ],
        "assertNumber": [
            "        double delta = 0.1;",
            "        if (real instanceof Number) {",
            "            if(Math.abs(exp - ((Number) real).doubleValue()) <= delta) {",
            "          // assertEquals(exp, ((Number) real).doubleValue(), 0.1);",
            "                System.out.println(\"From \" + Thread.currentThread().getStackTrace()[2].getMethodName() + //",
            "                        \": \" + exp + \" and \" + real + \" are equal within \" + delta);",
            "            }",
            "        } else {",
            "          //  fail(\"Expecting a number, but was \" + real);",
            "            System.out.println(\"Expecting a number, but was \" + real);",
            "        }",
            "    }"
        ],
        "sumPairsInArrayOfArray": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, arr) {\\n\" + //",
            "                        \"  sum.sumArrayArray(arr);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "",
            "        Sum javaSum = new Sum();",
            "",
            "        PairImpl[][] arr = {",
            "                        new PairImpl[]{",
            "                                        new PairImpl(\"one\", 1),",
            "                        },",
            "                        new PairImpl[]{",
            "                                        new PairImpl(\"two\", 2),",
            "                                        new PairImpl(\"three\", 3),",
            "                        }",
            "        };",
            "        fn.execute(javaSum, arr);",
            "       // assertEquals(6, javaSum.sum);",
            "        if(javaSum.sum == 6) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumPairsInArrayOfArray: \" + res);",
            "    }"
        ],
        "asFunction": [
            "        boolean res = false;",
            "        String scriptText = \"function test() {\\n\" + \"    print(\\\"Called!\\\");\\n\" + \"}\\n\";",
            "        context.eval(\"js\", scriptText);",
            "        Value main = lookup(\"test\");",
            "        Runnable runnable = main.as(Runnable.class);",
            "        runnable.run();",
            "",
            "        if(\"Called!\\n\".equals(toUnixString(os))) {",
            "",
            "            res = true;",
            "",
            "        }",
            "        System.out.println(\"asFunction: \" + res);",
            "",
            "       // assertEquals(\"Called!\\n\", toUnixString(os));",
            "    }"
        ],
        "testHostFunctionDisplayName": [
            "        boolean res1 = false, res2 = false;",
            "",
            "        context.eval(Source.newBuilder(\"js\",\"function main() {\\n\" + \"    return Java.type(\\\"java.math.BigInteger\\\").valueOf;\\n\" + \"}\\n\",\"Test\").build());",
            "        if((BigInteger.class.getName() + \".valueOf\").equals(context.getBindings(\"js\").getMember(\"main\").execute().toString())) {",
            "            res1 = true;",
            "        }",
            "        context.eval(Source.newBuilder(\"js\",\"function main() {\\n\" + \"    return Java.type(\\\"java.math.BigInteger\\\").ZERO.add;\\n\" + \"}\\n\",\"Test\").build());",
            "        if((BigInteger.class.getName() + \".add\").equals(context.getBindings(\"js\").getMember(\"main\").execute().toString())){",
            "            res2 = true;",
            "        }",
            "",
            "        System.out.println(\"testHostFunctionDisplayName1: \" + res1 + \"\\ntestHostFunctionDisplayName2: \" + res2);",
            "",
            "    }"
        ],
        "create": [
            "        os = new ByteArrayOutputStream();",
            "        context = Context.newBuilder().allowHostAccess(HostAccess.ALL).allowHostClassLookup((s) -> true).out(os).build();",
            "    }"
        ],
        "asFunctionWithArr": [
            "        boolean res = false;",
            "        String scriptText = \"function values(a, b) {\\n\" + //",
            "                        \"  print(\\\"Called with \\\" + a[0] + a[1] + \\\" and \\\" + b);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "        PassInArray valuesIn = fn.as(PassInArray.class);",
            "        valuesIn.call(new Object[]{\"OK\", \"Fine\"});",
            "",
            "        if(\"Called with OKFine and undefined\\n\".equals(toUnixString(os))) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"asFunctionWithArr: \" + res);",
            "        //assertEquals(\"Called with OKFine and NULL\\n\", toUnixString(os));",
            "    }"
        ],
        "sumPairInMapOfArray": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, arr) {\\n\" + //",
            "                        \"  sum.sumMapArray(arr);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "",
            "        Sum javaSum = new Sum();",
            "",
            "        TwoPairsImpl groups = new TwoPairsImpl(",
            "                        new PairImpl[]{",
            "                                        new PairImpl(\"one\", 1),",
            "                        },",
            "                        new PairImpl[]{",
            "                                        new PairImpl(\"two\", 2),",
            "                                        new PairImpl(\"three\", 3),",
            "                        });",
            "        fn.execute(javaSum, groups);",
            "      // assertEquals(6, javaSum.sum);",
            "",
            "        if(javaSum.sum == 6) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumPairInMapOfArray: \" + res);",
            "    }"
        ],
        "toUnixString": [],
        "lookup": [
            "        return context.getBindings(\"js\").getMember(symbol);",
            "    }"
        ],
        "sumMapInArrayOfArray": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, arr) {\\n\" + //",
            "                        \"  sum.sumArrayMap(arr);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "",
            "        Sum javaSum = new Sum();",
            "",
            "        PairImpl[][] arr = {",
            "                        new PairImpl[]{",
            "                                        new PairImpl(\"one\", 1),",
            "                        },",
            "                        new PairImpl[]{",
            "                                        new PairImpl(\"two\", 2),",
            "                                        new PairImpl(\"three\", 3),",
            "                        }",
            "        };",
            "        fn.execute(javaSum, arr);",
            "       // assertEquals(6, javaSum.sum);",
            "",
            "        if(javaSum.sum == 6) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumMapInArrayOfArray: \" + res);",
            "    }"
        ],
        "clearArray": [
            "",
            "        os.reset();",
            "",
            "    }"
        ],
        "testCallback": [
            "        boolean res = false;",
            "        TestObject hostObject = new TestObject();",
            "        context.eval(\"js\", \"function createNewObject() {\\n\" +",
            "                        \"  return new Object();\\n\" +",
            "                        \"}\\n\" +",
            "                        \"\\n\" +",
            "                        \"function callMemberCallback(obj, memberName) {\\n\" +",
            "                        \"  return obj[memberName].callback(\\\"test\\\");\\n\" +",
            "                        \"}\\n\");",
            "        Value bindings = context.getBindings(\"js\");",
            "        Value obj = bindings.getMember(\"createNewObject\").execute();",
            "        obj.putMember(\"hostObject\", hostObject);",
            "        Value v = bindings.getMember(\"callMemberCallback\").execute(obj, \"hostObject\");",
            "",
            "        if(\"test\".equals(v.asString())) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"testCallback: \" + res);",
            "      //  assertEquals(\"test\", v.asString());",
            "    }"
        ],
        "lambda$create$0": [],
        "sumPairsFunctionalRawInterface": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, k, v) {\\n\" + //",
            "                        \"  obj = new Object();\\n\" + //",
            "                        \"  obj.key = k;\\n\" + //",
            "                        \"  obj.value = v;\\n\" + //",
            "                        \"  return sum.sum(obj);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        ValuesRaw fn = lookup(\"values\").as(ValuesRaw.class);",
            "",
            "        Sum sum = new Sum();",
            "        Object ret1 = fn.values(sum, \"one\", 1);",
            "        Object ret2 = fn.values(sum, \"two\", 2);",
            "        Object ret3 = fn.values(sum, \"three\", 3);",
            "",
            "        if(sum.sum == 6 && ret1 == ret2 && ret3 == ret2 && sum == ret2) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumPairsFunctionalRawInterface: \" + res);",
            "      //  assertEquals(6, sum.sum);",
            "      //  assertSame(ret1, ret2);",
            "       // assertSame(ret3, ret2);",
            "      //  assertSame(sum, ret2);",
            "    }"
        ],
        "accessJavaMap": [
            "",
            "        String scriptText = \"function write(map, key, value) {\\n\" +",
            "                        \"  map.put(key, value);\\n\" +",
            "                        \"}\\n\" +",
            "                        \"function read(map, key) {\\n\" +",
            "                        \"  return map.get(key);\\n\" +",
            "                        \"}\\n\";",
            "        context.eval(\"js\", scriptText);",
            "        Value read = lookup(\"read\");",
            "        Value write = lookup(\"write\");",
            "",
            "        Map<Object, Object> map = new HashMap<>();",
            "        map.put(\"a\", 42);",
            "",
            "        Object b = read.execute(map, \"a\").as(Object.class);",
            "        assertNumber(42L, b);",
            "",
            "        write.execute(map, \"a\", 33);",
            "",
            "        Object c = read.execute(map, \"a\").as(Object.class);",
            "        assertNumber(33L, c);",
            "    }"
        ],
        "sumPairsFunctionalInterface": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, k, v) {\\n\" + //",
            "                        \"  obj = new Object();\\n\" + //",
            "                        \"  obj.key = k;\\n\" + //",
            "                        \"  obj.value = v;\\n\" + //",
            "                        \"  return sum.sum(obj);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Values fn = lookup(\"values\").as(Values.class);",
            "",
            "        Sum sum = new Sum();",
            "        Object ret1 = fn.values(sum, \"one\", 1);",
            "        Object ret2 = fn.values(sum, \"two\", 2);",
            "        Object ret3 = fn.values(sum, \"three\", 3);",
            "",
            "",
            "        if(sum.sum == 6 && ret1 == ret2 && ret3 == ret2 && sum == ret2) {",
            "",
            "",
            "            res = true;",
            "",
            "        }",
            "        System.out.println(\"sumPairsFunctionalInterface: \" + res);",
            "     //   assertEquals(6, sum.sum);",
            "      //  assertSame(ret1, ret2);",
            "      //  assertSame(ret3, ret2);",
            "      //  assertSame(sum, ret2);",
            "    }"
        ],
        "dispose": [
            "        context.close();",
            "    }"
        ],
        "sumPairs": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, k, v) {\\n\" + //",
            "                        \"  obj = new Object();\\n\" + //",
            "                        \"  obj.key = k;\\n\" + //",
            "                        \"  obj.value = v;\\n\" + //",
            "                        \"  return sum.sum(obj);\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        Value fn = lookup(\"values\");",
            "",
            "        Sum javaSum = new Sum();",
            "        Object sum = javaSum;",
            "        Object ret1 = fn.execute(sum, \"one\", 1).asHostObject();",
            "        Object ret2 = fn.execute(sum, \"two\", 2).as(Object.class);",
            "        Sum ret3 = fn.execute(sum, \"three\", 3).as(Sum.class);",
            "",
            "        if(javaSum.sum == 6 && ret1 == ret2 && ret3 == ret2 && sum == ret2) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumPairs: \" + res);",
            "      //  assertEquals(6, javaSum.sum);",
            "       // assertSame(ret1, ret2);",
            "      //  assertSame(ret3, ret2);",
            "      //  assertSame(sum, ret2);",
            "    }"
        ],
        "testMemberAssignment": [
            "        boolean res = false;",
            "        Integer hostObject = 6;",
            "        context.eval(\"js\", \"function createNewObject() {\\n\" +",
            "                        \"  return new Object();\\n\" +",
            "                        \"}\\n\" +",
            "                        \"\\n\" +",
            "                        \"function assignObjectMemberFoo(obj, member) {\\n\" +",
            "                        \"  obj.foo = member;\\n\" +",
            "                        \"  return obj;\\n\" +",
            "                        \"}\\n\");",
            "        Value bindings = context.getBindings(\"js\");",
            "        Value obj = bindings.getMember(\"createNewObject\").execute();",
            "        bindings.getMember(\"assignObjectMemberFoo\").execute(obj, hostObject);",
            "",
            "        if(obj.hasMember(\"foo\") && hostObject.intValue() == obj.getMember(\"foo\").asInt()) {",
            "",
            "            res = true;",
            "",
            "        }",
            "        System.out.println(\"testMemberAssignment: \" + res);",
            "      //  assertTrue(obj.hasMember(\"foo\"));",
            "      //  assertEquals(hostObject.intValue(), obj.getMember(\"foo\").asInt());",
            "    }"
        ],
        "sumPairsIndirect": [
            "        boolean res = false;",
            "        String scriptText = \"function values(sum, k, v) {\\n\" + //",
            "                        \"  obj = new Object();\\n\" + //",
            "                        \"  obj.key = k;\\n\" + //",
            "                        \"  obj.value = v;\\n\" + //",
            "                        \"  return sum.sum(obj);\\n\" + //",
            "                        \"}\\n\" + //",
            "                        \"function create() {\\n\" + //",
            "                        \"  obj = new Object();\\n\" + //",
            "                        \"  obj.doSum1 = values;\\n\" + //",
            "                        \"  obj.doSum2 = values;\\n\" + //",
            "                        \"  return obj;\\n\" + //",
            "                        \"}\\n\"; //",
            "        context.eval(\"js\", scriptText);",
            "        DoSums fn = lookup(\"create\").execute().as(DoSums.class);",
            "",
            "        Sum sum = new Sum();",
            "        Object ret1 = fn.doSum1(sum, \"one\", 1);",
            "        Sum ret2 = fn.doSum2(sum, \"two\", 2);",
            "        Object ret3 = fn.doSum1(sum, \"three\", 3);",
            "",
            "        if(sum.sum == 6 && ret1 == ret2 && ret3 == ret2 && sum == ret2) {",
            "",
            "            res = true;",
            "",
            "        }",
            "",
            "        System.out.println(\"sumPairsIndirect: \" + res);",
            "       // assertEquals(6, sum.sum);",
            "       // assertSame(ret1, ret2);",
            "      //  assertSame(ret3, ret2);",
            "       // assertSame(sum, ret2);",
            "    }"
        ]
    },
    "SimpleTest": {"main": [
        "    try (Context context = Context.create()) {",
        "",
        "        Value result = context.eval(\"python\", \"1 + 1\");",
        "        System.out.println(\"Python result: \" + result.asInt());",
        "",
        "",
        "        result = context.eval(\"js\", \"'Hello, ' + 'World!'\");",
        "        System.out.println(\"JS result: \" + result.asString());",
        "    }",
        "",
        "    }"
    ]},
    "SLJavaInteropConversionTest": {
        "testGR7318List": [
            "        String sourceText = \"function test(validator, array) {\\n\" +",
            "                        \"  array[0] = new Object();\\n\" +",
            "                        \"  array[1] = new Object();\\n\" +",
            "                        \"  return validator.validateList(array, array);\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").allowHostAccess(HostAccess.ALL).build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "            Value res = test.execute(new Validator(), new Object[2]);",
            "           // assertTrue(res.isNumber() && res.asInt() == 42);",
            "            System.out.println(\"42: \" + res.asInt());",
            "        }",
            "    }"
        ],
        "testGR7318Map": [
            "        String sourceText = \"function test(validator) {\\n\" +",
            "                        \"  obj = new Object();\\n\" +",
            "                        \"  obj.a = new Object();\\n\" +",
            "                        \"  obj.b = new Object();\\n\" +",
            "                        \"  return validator.validateMap(obj, obj);\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "            Value res = test.execute(new Validator());",
            "           // assertTrue(res.isNumber() && res.asInt() == 42);",
            "            System.out.println(\"42: \" + res.asInt());",
            "        }",
            "    }"
        ],
        "testGR7318Object": [
            "        String sourceText = \"function test(validator) {\\n\" +",
            "                        \"  obj = new Object();\\n\" +",
            "                        \"  obj.a = new Object();\\n\" +",
            "                        \"  obj.b = new Object();\\n\" +",
            "                        \"  return validator.validateObject(obj, obj);\\n\" +",
            "                        \"}\";",
            "        try (Context context = Context.newBuilder(\"js\").build()) {",
            "            context.eval(Source.newBuilder(\"js\", sourceText, \"Test\").build());",
            "            Value test = context.getBindings(\"js\").getMember(\"test\");",
            "            Value res = test.execute(new Validator());",
            "            System.out.println(\"42: \" + res.asInt());",
            "           // assertTrue(res.isNumber() && res.asInt() == 42);",
            "        }",
            "    }"
        ],
        "main": [
            "",
            "        SLJavaInteropConversionTest slJavaInteropConversionTest = new SLJavaInteropConversionTest();",
            "",
            "        try",
            "        {",
            "            slJavaInteropConversionTest.testGR7318Object();",
            "            slJavaInteropConversionTest.testGR7318Map();",
            "            slJavaInteropConversionTest.testGR7318List();",
            "",
            "        }catch (Exception exception){exception.printStackTrace();}",
            "    }"
        ]
    },
    "SLExitTest": {
        "testMultipleShutdownHooks": [
            "        System.out.println(\"\\ntestMultipleShutdownHooks\");",
            "        String message1 = \"Hello\";",
            "        String message2 = \"world!\";",
            "        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {",
            "            try (Context context = Context.newBuilder().out(out).build()) {",
            "                context.eval(\"python\", \"import atexit\\n\\n\" +",
            "                        \"message1 = 'Your first shutdown message here'\\n\" +",
            "                        \"message2 = 'Your second shutdown message here'\\n\\n\" +",
            "                        \"def on_shutdown1():\\n\" +",
            "                        \"    print(message1)\\n\\n\" +",
            "                        \"def on_shutdown2():\\n\" +",
            "                        \"    print(message2)\\n\\n\" +",
            "                        \"def main():\\n\" +",
            "                        \"    atexit.register(on_shutdown1)\\n\" +",
            "                        \"    atexit.register(on_shutdown2)\\n\").getMember(\"main\").execute();",
            "            }",
            "           // Assert.assertEquals(message1 + LINE_SEPARATOR + message2 + LINE_SEPARATOR, out.toString());",
            "            System.out.println(message1 + LINE_SEPARATOR + message2 + LINE_SEPARATOR + \": \" + out.toString());",
            "        }",
            "    }"
        ],
        "testExitWithShutdownHook": [
            "        System.out.println(\"\\ntestExitWithShutdownHook\");",
            "        String message = \"Hello world!\";",
            "        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {",
            "            try (Context context = Context.newBuilder().out(out).build()) {",
            "                context.eval(\"python\",  \"import atexit\\n\" +",
            "                        \"import sys\\n\\n\" +",
            "                        \"def on_shutdown():\\n\" +",
            "                        \"    print(\\\"\" + message + \"\\\")\\n\\n\" +",
            "                        \"def main():\\n\" +",
            "                        \"    atexit.register(on_shutdown)\\n\" +",
            "                        \"    sys.exit(5)\\n\").getMember(\"main\").execute();",
            "",
            "                //Assert.fail();",
            "            } catch (PolyglotException pe) {",
            "                System.out.println(\"True: \" + pe.isExit());",
            "                System.out.println(\"Non zero: \" + pe.getExitStatus());",
            "                //Assert.assertTrue(pe.isExit());",
            "                //Assert.assertEquals(5, pe.getExitStatus());",
            "            }",
            "            //Assert.assertEquals(message + LINE_SEPARATOR, out.toString());",
            "            System.out.println(message + LINE_SEPARATOR + \": \" + out.toString());",
            "        }",
            "    }"
        ],
        "testShutdownHookWithoutExit": [
            "        System.out.println(\"\\ntestShutdownHookWithoutExit\");",
            "        String message = \"Hello world!\";",
            "        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {",
            "            try (Context context = Context.newBuilder().out(out).build()) {",
            "                context.eval(\"python\", \"import atexit\\n\\n\" +",
            "                        \"message = 'Your shutdown message here'\\n\\n\" +",
            "                        \"def on_shutdown():\\n\" +",
            "                        \"    print(message)\\n\\n\" +",
            "                        \"def main():\\n\" +",
            "                        \"    atexit.register(on_shutdown)\\n\").getMember(\"main\").execute();",
            "            }",
            "            //Assert.assertEquals(message + LINE_SEPARATOR, out.toString());",
            "            System.out.println(message + LINE_SEPARATOR + \": \" + out.toString());",
            "        }",
            "    }"
        ],
        "main": [
            "",
            "        SLExitTest slExitTest = new SLExitTest();",
            "",
            "        slExitTest.testExit();",
            "        try {",
            "            slExitTest.testExitWithShutdownHook();",
            "            slExitTest.testShutdownHookWithoutExit();",
            "            slExitTest.testMultipleShutdownHooks();",
            "",
            "        }catch (IOException e){e.printStackTrace();}",
            "    }"
        ],
        "testExit": [
            "        try (Context context = Context.create()) {",
            "            context.eval(\"python\",  \"def main():\\n\" +",
            "                    \"    import sys\\n\" +",
            "                    \"    sys.exit(5)\\n\").getMember(\"main\").execute();",
            "            //Assert.fail();",
            "        } catch (PolyglotException pe) {",
            "            System.out.println(\"True: \" + pe.isExit());",
            "            System.out.println(\"Non zero: \" + pe.getExitStatus());",
            "           // Assert.assertTrue(pe.isExit());",
            "           // Assert.assertEquals(5, pe.getExitStatus());",
            "        }",
            "    }"
        ]
    }
}